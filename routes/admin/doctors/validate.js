// routes/admin/doctors/validate.js
const express = require('express');
const router = express.Router();
const prisma = require('../../../prisma/client');
const ApiResponse = require('../../../services/ApiResponse');
const AuthMiddleware = require('../../../middleware/authMiddleware');
const BodyFilter = require('../../../middleware/bodyFilterMiddleware');
const EmailService = require('../../../services/EmailService'); // Service d'email existant

// Sch√©ma de validation
const validateMedecinSchema = {
    fields: {
        action: {
            type: 'string',
            enum: ['VALIDE', 'REJETE']
        },
        motifRejet: {
            type: 'string',
            minLength: 10,
            maxLength: 500
        }
    },
    required: ['action'],
    strict: true
};

// PUT /v1/admin/doctors/{medecinId}/validate
router.put('/:medecinId/validate',
    AuthMiddleware.authenticate(),
    AuthMiddleware.authorize(['ADMIN']),
    BodyFilter.validate(validateMedecinSchema),
    async (req, res) => {
        try {
            const { medecinId } = req.params;
            const { action, motifRejet } = req.body;
            const adminUser = req.user;
            const clientIp = req.ip || req.connection.remoteAddress;

            // Validation conditionnelle du motif
            if (action === 'REJETE' && !motifRejet) {
                return ApiResponse.badRequest(res, 'Motif de rejet obligatoire', {
                    code: 'MOTIF_REQUIRED',
                    field: 'motifRejet'
                });
            }

            console.log(`üîç Admin ${adminUser.prenom} ${adminUser.nom} ${action === 'VALIDE' ? 'valide' : 'rejette'} le m√©decin: ${medecinId}`);

            // V√©rifier que le m√©decin existe et est en attente
            const medecin = await prisma.medecin.findUnique({
                where: { id: medecinId },
                include: {
                    user: {
                        select: {
                            nom: true,
                            prenom: true,
                            email: true,
                            telephone: true
                        }
                    }
                }
            });

            if (!medecin) {
                return ApiResponse.notFound(res, 'M√©decin non trouv√©', {
                    code: 'MEDECIN_NOT_FOUND',
                    medecinId
                });
            }

            if (medecin.statutValidation !== 'EN_ATTENTE') {
                return ApiResponse.badRequest(res, 'Seuls les m√©decins en attente peuvent √™tre valid√©s', {
                    code: 'INVALID_STATUS',
                    currentStatus: medecin.statutValidation
                });
            }

            // Mettre √† jour le statut du m√©decin
            const medecinUpdated = await prisma.medecin.update({
                where: { id: medecinId },
                data: {
                    statutValidation: action,
                    dateValidation: new Date(),
                    valideParAdminId: adminUser.id,
                    motifRejet: action === 'REJETE' ? motifRejet : null
                }
            });

            // Envoyer notification email selon l'action
            try {
                if (action === 'VALIDE') {
                    // Email de validation
                    const subject = '‚úÖ Votre compte m√©decin a √©t√© valid√©';
                    const content = `
                        Bonjour Dr ${medecin.user.prenom} ${medecin.user.nom},
                        
                        Excellente nouvelle ! Votre compte sur notre plateforme a √©t√© valid√© par ${adminUser.prenom} ${adminUser.nom}.
                        
                        Vous pouvez maintenant vous connecter avec :
                        ‚Ä¢ Email : ${medecin.user.email}
                        ‚Ä¢ Mot de passe : celui que vous avez d√©fini lors de l'inscription
                        
                        Prochaines √©tapes :
                        ‚Ä¢ Compl√©tez votre profil si n√©cessaire
                        ‚Ä¢ Configurez vos disponibilit√©s
                        ‚Ä¢ Commencez √† recevoir des demandes de rendez-vous
                        
                        Bienvenue sur la plateforme !
                        
                        L'√©quipe LYCORIS GROUP
                    `;

                    await EmailService.sendEmail({
                        to: medecin.user.email,
                        subject,
                        content,
                        type: 'VALIDATION_MEDECIN'
                    });

                } else {
                    // Email de rejet
                    const subject = '‚ùå Votre demande de validation n√©cessite des corrections';
                    const content = `
                        Bonjour Dr ${medecin.user.prenom} ${medecin.user.nom},
                        
                        Nous vous informons que votre demande de validation a √©t√© examin√©e par ${adminUser.prenom} ${adminUser.nom}.
                        
                        Motif n√©cessitant correction :
                        ${motifRejet}
                        
                        Que faire maintenant ?
                        ‚Ä¢ Corrigez les √©l√©ments mentionn√©s ci-dessus
                        ‚Ä¢ Contactez notre √©quipe pour assistance : support@medecins-patients.ci
                        ‚Ä¢ Votre compte reste actif pour les corrections
                        
                        Nous restons √† votre disposition pour vous accompagner.
                        
                        L'√©quipe LYCORIS GROUP
                    `;

                    await EmailService.sendEmail({
                        to: medecin.user.email,
                        subject,
                        content,
                        type: 'REJET_MEDECIN'
                    });
                }

                console.log(`üìß Email de ${action === 'VALIDE' ? 'validation' : 'rejet'} envoy√© √† ${medecin.user.email}`);

            } catch (emailError) {
                console.error('‚ö†Ô∏è Erreur envoi email:', emailError);
                // On continue quand m√™me car la validation DB est r√©ussie
            }

            console.log(`‚úÖ M√©decin ${action === 'VALIDE' ? 'valid√©' : 'rejet√©'} avec succ√®s: Dr ${medecin.user.prenom} ${medecin.user.nom} par admin ${adminUser.prenom} ${adminUser.nom}`);

            // R√©ponse selon l'action
            if (action === 'VALIDE') {
                return ApiResponse.success(res, 'M√©decin valid√© avec succ√®s', {
                    status: 'VALIDE',
                    message: `Dr ${medecin.user.prenom} ${medecin.user.nom} a √©t√© valid√© et peut maintenant se connecter √† la plateforme.`,
                    nextSteps: [
                        'Le m√©decin a re√ßu un email de confirmation',
                        'Il peut maintenant se connecter avec son email et mot de passe',
                        'Son profil est visible pour les patients',
                        'Il peut commencer √† recevoir des demandes de rendez-vous'
                    ]
                });
            } else {
                return ApiResponse.success(res, 'M√©decin rejet√© avec motif', {
                    status: 'REJETE',
                    message: `Dr ${medecin.user.prenom} ${medecin.user.nom} a √©t√© rejet√©. Un email avec le motif lui a √©t√© envoy√©.`,
                    motifRejet,
                    nextSteps: [
                        'Le m√©decin a re√ßu un email avec le motif du rejet',
                        'Il peut corriger les probl√®mes mentionn√©s',
                        'Il doit contacter l\'administration pour resoumission',
                        'Son statut reste EN_ATTENTE pour r√©vision future'
                    ]
                });
            }

        } catch (error) {
            console.error('‚ùå Erreur validation m√©decin:', error);
            return ApiResponse.serverError(res, 'Erreur interne lors de la validation du m√©decin');
        }
    }
);

module.exports = router;